{"version":3,"sources":["services/moviedb-service/no_image_poster.png","services/moviedb-service/moviedb-service.js","components/genres-context/genres-context.js","components/card-header/card-header.js","components/card-header/index.js","components/item-rate/item-rate.js","components/item-rate/index.js","components/card/card.js","services/cut-overflow-content/cut-overflow-content.js","components/cards-list/cards-list.js","components/cards-list/index.js","components/app-messages/index.js","components/app-messages/app-messages.js","components/load-spinner/index.js","components/load-spinner/load-spinner.js","components/content-tab/content-tab.js","components/content-tab/index.js","components/search-panel/search-panel.js","components/search-panel/index.js","components/app/app.js","components/app/index.js","index.js"],"names":["MovieDBService","_apiKey","_apiBase","_imageBase","requestFromDB","request","a","path","fetch","response","json","data","createGuestSession","guest_session_id","rateMovie","id","value","sessionID","paramsRequest","method","headers","body","JSON","stringify","searchMovies","page","keyword","rated","results","map","el","createDataMovie","currentPage","totalResults","total_results","getGenresList","genresList","genres","reduce","acc","name","date","format","Date","release_date","err","poster","poster_path","noFoundPoster","title","overview","genresIds","genre_ids","globalRate","vote_average","userRate","rating","React","createContext","GenresProvider","Provider","GenresConsumer","Consumer","CardHeader","genresBlocks","className","rateStatus","classNames","src","alt","defaultProps","ItemRate","changeRate","onChange","defaultValue","allowHalf","count","style","fontSize","verticalAlign","lineHeight","Card","movieDBService","props","refreshRated","then","setTimeout","selector","overviewBlocks","document","getElementById","scrollHeight","clientHeight","lastSpace","textContent","lastIndexOf","slice","cutOverflowContent","this","other","Component","CardsList","xs","span","lg","changePage","currentSearch","moviesList","createMovieList","paginationShow","current","total","pageSize","showSizeChanger","pagination","length","gutter","AppMessages","type","message","noResult","error","noRated","description","showIcon","LoadSpinner","size","ContentTab","loading","loadingError","search","contentData","noResults","spinner","content","propTypes","PropTypes","bool","isRequired","string","number","func","SearchPanel","state","inputValue","newRequest","debounce","newSearch","changeInputValue","evt","setState","target","placeholder","App","ratedData","currentPageSearch","currentPageRated","totalResultsSearch","totalResultsRated","getData","responseMovies","prevState","changePageSearch","changePageRated","list","TabPane","Tabs","params","checkRatedData","forEach","searchEl","defaultActiveKey","tab","ReactDOM","render"],"mappings":"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","file":"static/js/main.fa25c3f8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/no_image_poster.68ae3506.png\";","import { format } from 'date-fns';\nimport noFoundPoster from './no_image_poster.png';\n\nexport default class MovieDBService {\n  _apiKey = 'api_key=b7473b579abba0475a9336164324a2c1';\n\n  _apiBase = 'https://api.themoviedb.org/3';\n\n  _imageBase = 'https://image.tmdb.org/t/p/w500';\n\n  requestFromDB = async (request) => {\n    const path = `${this._apiBase}${request}`;\n    const response = await fetch(path);\n    const data = await response.json();\n    return data;\n  };\n\n  createGuestSession = async () => {\n    const path = `${this._apiBase}/authentication/guest_session/new?${this._apiKey}`;\n    const response = await fetch(path);\n    const data = await response.json();\n    return data.guest_session_id;\n  };\n\n  rateMovie = async (id, value, sessionID) => {\n    const path = `${this._apiBase}/movie/${id}/rating?${this._apiKey}&guest_session_id=${sessionID}`;\n    const paramsRequest = {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify({ value }),\n    };\n    const response = await fetch(path, paramsRequest);\n    const data = await response.json();\n    return data;\n  };\n\n  searchMovies = async (page, keyword, rated, sessionID) => {\n    const path = rated\n      ? `/guest_session/${sessionID}/rated/movies?${this._apiKey}&page=${page}`\n      : `/search/movie?${this._apiKey}&query=${keyword}&page=${page}`;\n    const response = await this.requestFromDB(path);\n    const data = response.results.map((el) => this.createDataMovie(el));\n    return {\n      data,\n      currentPage: response.page,\n      totalResults: response.total_results,\n    };\n  };\n\n  getGenresList = async () => {\n    const path = `/genre/movie/list?${this._apiKey}`;\n    const genresList = await this.requestFromDB(path);\n    return genresList.genres.reduce((acc, el) => {\n      acc[el.id] = el.name;\n      return acc;\n    }, {});\n  };\n\n  createDataMovie = (data) => {\n    let date;\n    try {\n      date = format(new Date(data.release_date), 'MMM d, y');\n    } catch (err) {\n      date = 'No date info';\n    }\n\n    const poster = data.poster_path ? `${this._imageBase}${data.poster_path}` : noFoundPoster;\n\n    return {\n      id: data.id,\n      title: data.title,\n      overview: data.overview,\n      date,\n      poster,\n      genresIds: data.genre_ids,\n      globalRate: data.vote_average,\n      userRate: data.rating || 0,\n    };\n  };\n}\n","import React from 'react';\n\nconst { Provider: GenresProvider, Consumer: GenresConsumer } = React.createContext();\n\nexport { GenresProvider, GenresConsumer };\n","import React from 'react';\nimport './card-header.css';\nimport PropTypes, { string } from 'prop-types';\nimport classNames from 'classnames';\n\nexport default function CardHeader({ poster, globalRate, title, date, genresIds, genresList }) {\n  const genresBlocks = genresIds.map((el) => (\n    <span key={el} className=\"movie-item__genres-item\">\n      {genresList[el]}\n    </span>\n  ));\n\n  const rateStatus = classNames({\n    'movie-item__vote-container--low': globalRate < 3,\n    'movie-item__vote-container--pre-intermediate': globalRate >= 3 && globalRate < 5,\n    'movie-item__vote-container--intermediate': globalRate >= 5 && globalRate < 7,\n  });\n\n  return (\n    <header className=\"movie-item__header\">\n      <img className=\"movie-item__poster\" src={poster} alt=\"Movie poster\" />\n      <div className=\"movie-item__header-content\">\n        <div className={`movie-item__vote-container ${rateStatus}`}>\n          <span className=\"movie-item__vote\">{globalRate}</span>\n        </div>\n        <h3 className=\"movie-item__title\">{title}</h3>\n        <div className=\"movie-item__date\">{date}</div>\n        <div className=\"movie-item__genres-container\">{genresBlocks}</div>\n      </div>\n    </header>\n  );\n}\n\nCardHeader.defaultProps = {\n  globalRate: 0,\n  genresList: {},\n};\n\nCardHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genresIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n  genresList: PropTypes.objectOf(string),\n  globalRate: PropTypes.number,\n};\n","import CardHeader from './card-header';\n\nexport default CardHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Rate } from 'antd';\n\nexport default function ItemRate({ userRate, changeRate }) {\n  return (\n    <Rate\n      onChange={(value) => changeRate(value)}\n      defaultValue={userRate}\n      allowHalf\n      count={10}\n      style={{ fontSize: '1.2em', verticalAlign: 'middle', lineHeight: '46px' }}\n    />\n  );\n}\n\nItemRate.propTypes = {\n  userRate: PropTypes.number,\n  changeRate: PropTypes.func.isRequired,\n};\n\nItemRate.defaultProps = {\n  userRate: 0,\n};\n","import ItemRate from './item-rate';\n\nexport default ItemRate;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { GenresConsumer } from '../genres-context';\nimport './card.css';\nimport CardHeader from '../card-header';\nimport ItemRate from '../item-rate';\nimport cutOverflowContent from '../../services/cut-overflow-content/cut-overflow-content';\nimport MovieDBService from '../../services/moviedb-service/moviedb-service';\n\nexport default class Card extends React.Component {\n  movieDBService = new MovieDBService();\n\n  static defaultProps = {\n    userRate: 0,\n    overview: 'Overview not found',\n    sessionID: null,\n  };\n\n  static propTypes = {\n    overview: PropTypes.string,\n    userRate: PropTypes.number,\n    id: PropTypes.number.isRequired,\n    sessionID: PropTypes.string,\n    refreshRated: PropTypes.func.isRequired,\n  };\n\n  componentDidMount() {\n    const { id } = this.props;\n    cutOverflowContent(id);\n  }\n\n  changeRate = (value) => {\n    const { rateMovie } = this.movieDBService;\n    const { id, sessionID, refreshRated } = this.props;\n    rateMovie(id, value, sessionID).then(() => {\n      setTimeout(() => refreshRated(), 1000);\n    });\n  };\n\n  render() {\n    const { overview, userRate, id, ...other } = this.props;\n\n    return (\n      <div className=\"movie-item\">\n        <GenresConsumer>{(genresList) => <CardHeader {...other} genresList={genresList} />}</GenresConsumer>\n        <p id={id} className=\"movie-item__overview\">\n          {overview}\n        </p>\n        <footer className=\"movie-item__footer\">\n          <ItemRate userRate={userRate} changeRate={(value) => this.changeRate(value)} />\n        </footer>\n      </div>\n    );\n  }\n}\n","export default function cutOverflowContent(selector) {\n  const overviewBlocks = document.getElementById(selector);\n  while (overviewBlocks.scrollHeight > overviewBlocks.clientHeight) {\n    const lastSpace = overviewBlocks.textContent.lastIndexOf(' ');\n    overviewBlocks.textContent = `${overviewBlocks.textContent.slice(0, lastSpace)}...`;\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Pagination } from 'antd';\nimport './cards-list.css';\n\nimport Card from '../card/card';\n\nexport default class CardsList extends React.Component {\n  static propTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    changePage: PropTypes.func.isRequired,\n    currentPage: PropTypes.number,\n    currentSearch: PropTypes.string,\n    totalResults: PropTypes.number.isRequired,\n    sessionID: PropTypes.string,\n    refreshRated: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    currentPage: 0,\n    currentSearch: '',\n    sessionID: null,\n  };\n\n  createMovieList(data) {\n    const { sessionID, refreshRated } = this.props;\n    return data.map((el) => {\n      const { id } = el;\n      return (\n        <Col key={id} xs={{ span: 24 }} lg={{ span: 12 }}>\n          <Card sessionID={sessionID} refreshRated={refreshRated} {...el} />\n        </Col>\n      );\n    });\n  }\n\n  render() {\n    const { data, changePage, currentPage, currentSearch, totalResults } = this.props;\n    const moviesList = this.createMovieList(data);\n    const paginationShow = (\n      <Pagination\n        current={currentPage}\n        total={totalResults}\n        onChange={(page) => changePage(page, currentSearch)}\n        pageSize={20}\n        showSizeChanger={false}\n      />\n    );\n    const pagination = moviesList.length ? paginationShow : null;\n\n    return (\n      <>\n        <Row gutter={[36, 36]}>{moviesList}</Row>\n        <div className=\"movie-list__pagination-container\">{pagination}</div>\n      </>\n    );\n  }\n}\n","import CardsList from './cards-list';\n\nexport default CardsList;\n","import AppMessages from './app-messages';\n\nexport default AppMessages;\n","import React from 'react';\nimport { Alert } from 'antd';\nimport PropTypes from 'prop-types';\n\nexport default function AppMessages({ type }) {\n  const messages = {\n    noResult: 'No matches',\n    error: 'Bad news',\n    noRated: \"It's empty here for now\",\n  };\n  const descriptions = {\n    noResult: 'Sorry, no results were found. Try to change your request.',\n    error: 'Sorry, something went wrong. Try to reload the page and repeat.',\n    noRated: 'Rate movies to add to the list',\n  };\n  const message = messages[type];\n  const description = descriptions[type];\n  return <Alert message={message} description={description} showIcon type=\"info\" />;\n}\n\nAppMessages.propTypes = {\n  type: PropTypes.string.isRequired,\n};\n","import LoadSpinner from './load-spinner';\n\nexport default LoadSpinner;\n","import React from 'react';\nimport { Spin } from 'antd';\nimport './load-spinner.css';\n\nexport default function LoadSpinner() {\n  return <Spin className=\"load-spinner\" size=\"large\" />;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CardsList from '../cards-list';\nimport AppMessages from '../app-messages';\nimport LoadSpinner from '../load-spinner';\n\nexport default function ContentTab(props) {\n  const { loading, loadingError, currentSearch, totalResults, changePage, refreshRated, search, ...data } = props;\n  const contentData = (\n    <CardsList\n      changePage={changePage}\n      currentSearch={currentSearch}\n      totalResults={totalResults}\n      refreshRated={refreshRated}\n      {...data}\n    />\n  );\n  let noResults = null;\n  if (search) {\n    noResults = !totalResults && !loading && currentSearch ? <AppMessages type=\"noResult\" /> : null;\n  }\n  const error = loadingError ? <AppMessages type=\"error\" /> : null;\n  const spinner = loading ? <LoadSpinner /> : null;\n  const content = !(loading || loadingError) ? contentData : null;\n  return (\n    <>\n      {noResults}\n      {error}\n      {spinner}\n      {content}\n    </>\n  );\n}\n\nContentTab.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  loadingError: PropTypes.bool.isRequired,\n  currentSearch: PropTypes.string,\n  totalResults: PropTypes.number.isRequired,\n  changePage: PropTypes.func.isRequired,\n  refreshRated: PropTypes.func.isRequired,\n  search: PropTypes.bool,\n};\n\nContentTab.defaultProps = {\n  currentSearch: '',\n  search: false,\n};\n","import ContentTab from './content-tab';\n\nexport default ContentTab;\n","import React from 'react';\nimport { Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\n\nimport './search-panel.css';\n\nexport default class SearchPanel extends React.Component {\n  static propTypes = {\n    newSearch: PropTypes.func.isRequired,\n  };\n\n  state = {\n    inputValue: null,\n  };\n\n  // eslint-disable-next-line react/destructuring-assignment\n  newRequest = debounce((value) => this.props.newSearch(1, value), 400);\n\n  changeInputValue = (evt) => {\n    this.setState({ inputValue: evt.target.value });\n    this.newRequest(evt.target.value);\n  };\n\n  render() {\n    const { inputValue } = this.state;\n    return (\n      <header className=\"header\">\n        <Input onChange={this.changeInputValue} placeholder=\"Type to search...\" value={inputValue} />\n      </header>\n    );\n  }\n}\n","import SearchPanel from './search-panel';\n\nexport default SearchPanel;\n","import React from 'react';\nimport { Tabs } from 'antd';\nimport './app.css';\nimport MovieDBService from '../../services/moviedb-service/moviedb-service';\nimport ContentTab from '../content-tab';\nimport SearchPanel from '../search-panel';\nimport { GenresProvider } from '../genres-context';\n\nexport default class App extends React.Component {\n  movieDBService = new MovieDBService();\n\n  state = {\n    data: [],\n    ratedData: [],\n    currentSearch: '',\n    currentPageSearch: 1,\n    currentPageRated: 1,\n    totalResultsSearch: 0,\n    totalResultsRated: 0,\n    loading: false,\n    loadingError: false,\n    sessionID: null,\n  };\n\n  componentDidMount() {\n    const { createGuestSession, getGenresList } = this.movieDBService;\n    createGuestSession().then((sessionID) => this.setState({ sessionID }));\n    getGenresList().then((list) => {\n      this.genresList = list;\n    });\n  }\n\n  getData = async (page, keyword, rated, sessionID) => {\n    if (keyword === '' && !rated) {\n      this.setState({ data: [], currentSearch: '', totalResultsSearch: 0, loading: false });\n      return;\n    }\n    try {\n      const { searchMovies } = this.movieDBService;\n      this.setState({ loading: true });\n      const responseMovies = await searchMovies(page, keyword, rated, sessionID);\n      const { data, currentPage, totalResults } = responseMovies;\n      this.setState((prevState) => ({\n        data: rated ? prevState.data : data,\n        ratedData: rated ? data : prevState.ratedData,\n        loading: false,\n        currentSearch: rated ? prevState.currentSearch : keyword,\n        currentPageSearch: rated ? prevState.currentPageSearch : currentPage,\n        currentPageRated: rated ? currentPage : prevState.currentPageRated,\n        totalResultsSearch: rated ? prevState.totalResultsSearch : totalResults,\n      }));\n    } catch (err) {\n      this.setState({ loadingError: true, loading: false });\n    }\n  };\n\n  refreshRated = async () => {\n    const { searchMovies } = this.movieDBService;\n    const { sessionID, currentPageRated } = this.state;\n    const ratedData = await searchMovies(currentPageRated, null, true, sessionID);\n    this.setState({\n      ratedData: ratedData.data,\n      totalResultsRated: ratedData.totalResults,\n    });\n  };\n\n  changePageSearch = (page) => {\n    const { currentSearch } = this.state;\n    this.getData(page, currentSearch);\n  };\n\n  changePageRated = (page) => {\n    const { sessionID } = this.state;\n    this.getData(page, null, true, sessionID);\n  };\n\n  render() {\n    const { TabPane } = Tabs;\n    const { data, ratedData, currentPageSearch, currentPageRated, totalResultsSearch, totalResultsRated, ...params } =\n      this.state;\n    const checkRatedData = [...data];\n    checkRatedData.forEach((searchEl) => {\n      ratedData.forEach((el) => {\n        if (searchEl.id === el.id) {\n          // eslint-disable-next-line no-param-reassign\n          searchEl.userRate = el.userRate;\n        }\n      });\n    });\n\n    return (\n      <GenresProvider value={this.genresList}>\n        <div className=\"container\">\n          <Tabs defaultActiveKey=\"search\">\n            <TabPane tab=\"Search\" key=\"search\">\n              <SearchPanel newSearch={this.getData} />\n              <ContentTab\n                search\n                refreshRated={this.refreshRated}\n                data={checkRatedData}\n                totalResults={totalResultsSearch}\n                currentPage={currentPageSearch}\n                changePage={this.changePageSearch}\n                {...params}\n              />\n            </TabPane>\n            <TabPane tab=\"Rated\" key=\"rated\">\n              <ContentTab\n                refreshRated={this.refreshRated}\n                data={ratedData}\n                totalResults={totalResultsRated}\n                currentPage={currentPageRated}\n                changePage={this.changePageRated}\n                {...params}\n              />\n            </TabPane>\n          </Tabs>\n        </div>\n      </GenresProvider>\n    );\n  }\n}\n","import App from './app';\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nimport App from './components/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}