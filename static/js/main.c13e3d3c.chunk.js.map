{"version":3,"sources":["services/moviedb-service/no_image_poster.png","services/moviedb-service/moviedb-service.js","utils/cut-overflow-content/cut-overflow-content.js","genres-context.js","components/card-header/card-header.js","components/card-header/index.js","components/item-rate/item-rate.js","components/item-rate/index.js","components/card/card.js","components/cards-list/cards-list.js","components/cards-list/index.js","components/alert-messages/index.js","components/alert-messages/alert-messages.js","components/load-spinner/index.js","components/load-spinner/load-spinner.js","components/content-tab/content-tab.js","components/content-tab/index.js","components/search-panel/search-panel.js","components/search-panel/index.js","components/app/app.js","components/app/index.js","index.js"],"names":["MovieDBService","_apiKey","_apiBase","_imageBase","requestFromDB","request","a","path","fetch","response","json","data","createGuestSession","guest_session_id","rateMovie","id","value","sessionID","paramsRequest","method","headers","body","JSON","stringify","searchMovies","page","keyword","rated","results","map","el","createDataMovie","currentPage","totalResults","total_results","getGenresList","genresList","genres","reduce","acc","name","date","format","Date","release_date","err","poster","poster_path","noFoundPoster","title","overview","genresIds","genre_ids","globalRate","vote_average","userRate","rating","cutOverflowContent","selector","document","querySelectorAll","forEach","clientHeight","scrollHeight","lastSpace","textContent","lastIndexOf","slice","React","createContext","GenresProvider","Provider","GenresConsumer","Consumer","CardHeader","genresBlocks","className","rateStatus","classNames","src","alt","defaultProps","ItemRate","changeRate","onChange","defaultValue","allowHalf","count","style","fontSize","verticalAlign","lineHeight","Card","movieDBService","props","refreshRated","then","setTimeout","this","other","Component","CardsList","xs","span","lg","changePage","currentSearch","moviesList","createMovieList","paginationShow","current","total","pageSize","showSizeChanger","pagination","length","gutter","AlertMessages","type","message","noResult","error","noRated","description","showIcon","LoadSpinner","size","ContentTab","loading","loadingError","search","SearchPanel","state","inputValue","newRequest","debounce","newSearch","changeInputValue","evt","setState","target","placeholder","App","ratedData","currentPageSearch","currentPageRated","totalResultsSearch","totalResultsRated","getData","responseMovies","prevState","changePageSearch","changePageRated","list","TabPane","Tabs","params","checkRatedData","searchEl","defaultActiveKey","tab","forceRender","ReactDOM","render","getElementById"],"mappings":"8ZAAe,MAA0B,4CCGpBA,E,iDACnBC,QAAU,2C,KAEVC,SAAW,+B,KAEXC,WAAa,kC,KAEbC,c,uCAAgB,WAAOC,GAAP,mBAAAC,EAAA,6DACRC,EADQ,UACE,EAAKL,UADP,OACkBG,GADlB,SAESG,MAAMD,GAFf,cAERE,EAFQ,gBAGKA,EAASC,OAHd,cAGRC,EAHQ,yBAIPA,GAJO,2C,2DAOhBC,mB,sBAAqB,gCAAAN,EAAA,6DACbC,EADa,UACH,EAAKL,SADF,6CAC+C,EAAKD,SADpD,SAEIO,MAAMD,GAFV,cAEbE,EAFa,gBAGAA,EAASC,OAHT,cAGbC,EAHa,yBAIZA,EAAKE,kBAJO,2C,KAOrBC,U,uCAAY,WAAOC,EAAIC,EAAOC,GAAlB,qBAAAX,EAAA,6DACJC,EADI,UACM,EAAKL,SADX,kBAC6Ba,EAD7B,mBAC0C,EAAKd,QAD/C,6BAC2EgB,GAC/EC,EAAgB,CACpBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEP,WAPf,SASaR,MAAMD,EAAMW,GATzB,cASJT,EATI,gBAUSA,EAASC,OAVlB,cAUJC,EAVI,yBAWHA,GAXG,2C,+DAcZa,a,uCAAe,WAAOC,EAAMC,EAASC,EAAOV,GAA7B,mBAAAX,EAAA,6DACPC,EAAOoB,EAAK,yBACIV,EADJ,yBAC8B,EAAKhB,QADnC,iBACmDwB,GADnD,wBAEG,EAAKxB,QAFR,kBAEyByB,EAFzB,iBAEyCD,GAH9C,SAIU,EAAKrB,cAAcG,GAJ7B,cAIPE,EAJO,OAKPE,EAAOF,EAASmB,QAAQC,KAAI,SAACC,GAAD,OAAQ,EAAKC,gBAAgBD,MALlD,kBAMN,CACLnB,OACAqB,YAAavB,EAASgB,KACtBQ,aAAcxB,EAASyB,gBATZ,2C,iEAafC,c,sBAAgB,8BAAA7B,EAAA,6DACRC,EADQ,4BACoB,EAAKN,SADzB,SAEW,EAAKG,cAAcG,GAF9B,cAER6B,EAFQ,yBAGPA,EAAWC,OAAOC,QAAO,SAACC,EAAKT,GAEpC,OADAS,EAAIT,EAAGf,IAAMe,EAAGU,KACTD,IACN,KANW,2C,KAShBR,gBAAkB,SAACpB,GACjB,IAAI8B,EACJ,IACEA,EAAOC,YAAO,IAAIC,KAAKhC,EAAKiC,cAAe,YAC3C,MAAOC,GACPJ,EAAO,eAGT,IAAMK,EAASnC,EAAKoC,YAAL,UAAsB,EAAK5C,YAA3B,OAAwCQ,EAAKoC,aAAgBC,EAE5E,MAAO,CACLjC,GAAIJ,EAAKI,GACTkC,MAAOtC,EAAKsC,MACZC,SAAUvC,EAAKuC,SACfT,OACAK,SACAK,UAAWxC,EAAKyC,UAChBC,WAAY1C,EAAK2C,aACjBC,SAAU5C,EAAK6C,QAAU,KC9EhB,SAASC,EAAmBC,GAClBC,SAASC,iBAAiBF,GAClCG,SAAQ,SAAC/B,GACtB,GAAIA,EAAGgC,aACL,KAAOhC,EAAGiC,aAAejC,EAAGgC,cAAc,CACxC,IAAME,EAAYlC,EAAGmC,YAAYC,YAAY,KAC7CpC,EAAGmC,YAAH,UAAoBnC,EAAGmC,YAAYE,MAAM,EAAGH,GAA5C,W,+BCJR,G,OAA+DI,IAAMC,iBAAnDC,EAAlB,EAAQC,SAAoCC,EAA5C,EAAkCC,S,uCCGnB,SAASC,EAAT,GAAiF,IAA3D5B,EAA0D,EAA1DA,OAAQO,EAAkD,EAAlDA,WAAYJ,EAAsC,EAAtCA,MAAOR,EAA+B,EAA/BA,KAAMU,EAAyB,EAAzBA,UAAWf,EAAc,EAAdA,WACzEuC,EAAexB,EAAUtB,KAAI,SAACC,GAAD,OACjC,sBAAe8C,UAAU,0BAAzB,SACGxC,EAAWN,IADHA,MAKP+C,EAAaC,IAAW,CAC5B,kCAAmCzB,EAAa,EAChD,+CAAgDA,GAAc,GAAKA,EAAa,EAChF,2CAA4CA,GAAc,GAAKA,EAAa,IAG9E,OACE,yBAAQuB,UAAU,qBAAlB,UACE,qBAAKA,UAAU,qBAAqBG,IAAKjC,EAAQkC,IAAI,iBACrD,sBAAKJ,UAAU,6BAAf,UACE,qBAAKA,UAAS,qCAAgCC,GAA9C,SACE,sBAAMD,UAAU,mBAAhB,SAAoCvB,MAEtC,oBAAIuB,UAAU,oBAAd,SAAmC3B,IACnC,qBAAK2B,UAAU,mBAAf,SAAmCnC,IACnC,qBAAKmC,UAAU,+BAAf,SAA+CD,UAMvDD,EAAWO,aAAe,CACxB5B,WAAY,EACZjB,WAAY,ICjCCsC,Q,SCEA,SAASQ,EAAT,GAA6C,IAAzB3B,EAAwB,EAAxBA,SAAU4B,EAAc,EAAdA,WAC3C,OACE,cAAC,IAAD,CACEC,SAAU,SAACpE,GAAD,OAAWmE,EAAWnE,IAChCqE,aAAc9B,EACd+B,WAAS,EACTC,MAAO,GACPC,MAAO,CAAEC,SAAU,QAASC,cAAe,SAAUC,WAAY,UAUvET,EAASD,aAAe,CACtB1B,SAAU,GCpBG2B,Q,+BCMMU,E,4MACnBC,eAAiB,IAAI7F,E,EAgBrBmF,WAAa,SAACnE,GACZ,IAAQF,EAAc,EAAK+E,eAAnB/E,UACR,EAAwC,EAAKgF,MAArC/E,EAAR,EAAQA,GAAIE,EAAZ,EAAYA,UAAW8E,EAAvB,EAAuBA,aACvBjF,EAAUC,EAAIC,EAAOC,GAAW+E,MAAK,WACnCC,YAAW,kBAAMF,MAAgB,S,4CAIrC,WAAU,IAAD,OACP,EAA6CG,KAAKJ,MAA1C5C,EAAR,EAAQA,SAAUK,EAAlB,EAAkBA,SAAUxC,EAA5B,EAA4BA,GAAOoF,EAAnC,iBAEA,OACE,sBAAKvB,UAAU,aAAf,UACE,cAACJ,EAAD,UAAiB,SAACpC,GAAD,OAAgB,cAAC,EAAD,2BAAgB+D,GAAhB,IAAuB/D,WAAYA,QACpE,mBAAGrB,GAAIA,EAAI6D,UAAU,uBAArB,SACG1B,IAEH,wBAAQ0B,UAAU,qBAAlB,SACE,cAAC,EAAD,CAAUrB,SAAUA,EAAU4B,WAAY,SAACnE,GAAD,OAAW,EAAKmE,WAAWnE,e,GAnC7CoD,IAAMgC,WAAnBR,EAGZX,aAAe,CACpB1B,SAAU,EACVL,SAAU,qBACVjC,UAAW,M,ICNMoF,E,uKAiBnB,WACE5C,EAAmB,2B,6BAGrB,SAAgB9C,GACd,MAAoCuF,KAAKJ,MAAjC7E,EAAR,EAAQA,UAAW8E,EAAnB,EAAmBA,aACnB,OAAOpF,EAAKkB,KAAI,SAACC,GACf,IAAQf,EAAOe,EAAPf,GACR,OACE,cAAC,IAAD,CAAcuF,GAAI,CAAEC,KAAM,IAAMC,GAAI,CAAED,KAAM,IAA5C,SACE,cAAC,EAAD,aAAMtF,UAAWA,EAAW8E,aAAcA,GAAkBjE,KADpDf,Q,oBAOhB,WACE,MAAuEmF,KAAKJ,MAApEnF,EAAR,EAAQA,KAAM8F,EAAd,EAAcA,WAAYzE,EAA1B,EAA0BA,YAAa0E,EAAvC,EAAuCA,cAAezE,EAAtD,EAAsDA,aAChD0E,EAAaT,KAAKU,gBAAgBjG,GAClCkG,EACJ,cAAC,IAAD,CACEC,QAAS9E,EACT+E,MAAO9E,EACPmD,SAAU,SAAC3D,GAAD,OAAUgF,EAAWhF,EAAMiF,IACrCM,SAAU,GACVC,iBAAiB,IAGfC,EAAaP,EAAWQ,OAASN,EAAiB,KAExD,OACE,qCACE,cAAC,IAAD,CAAKO,OAAQ,CAAC,GAAI,IAAlB,SAAwBT,IACxB,qBAAK/B,UAAU,mCAAf,SAAmDsC,W,GAlDpB9C,IAAMgC,WAAxBC,EAWZpB,aAAe,CACpBjD,YAAa,EACb0E,cAAe,GACfzF,UAAW,MCpBAoF,Q,SCAAgB,MCEA,YAAkC,IAATC,EAAQ,EAARA,KAWhCC,EAVW,CACfC,SAAU,aACVC,MAAO,WACPC,QAAS,2BAOcJ,GACnBK,EANe,CACnBH,SAAU,4DACVC,MAAO,kEACPC,QAAS,kCAGsBJ,GACjC,OAAO,cAAC,IAAD,CAAOC,QAASA,EAASI,YAAaA,EAAaC,UAAQ,EAACN,KAAK,U,gBCf3DO,MCEA,WACb,OAAO,cAAC,IAAD,CAAMjD,UAAU,eAAekD,KAAK,W,iGCC9B,SAASC,EAAWjC,GACjC,IAAQkC,EAAkGlC,EAAlGkC,QAASC,EAAyFnC,EAAzFmC,aAAcvB,EAA2EZ,EAA3EY,cAAezE,EAA4D6D,EAA5D7D,aAAcwE,EAA8CX,EAA9CW,WAAYV,EAAkCD,EAAlCC,aAAcmC,EAAoBpC,EAApBoC,OAAWvH,EAAjG,YAA0GmF,EAA1G,GAEA,OAAImC,EAAqB,cAAC,EAAD,CAAeX,KAAK,UACzCU,EAAgB,cAAC,EAAD,KACf/F,IAAiB+F,GAAWtB,GAAiBwB,EAAe,cAAC,EAAD,CAAeZ,KAAK,aAC/EU,GAAWC,OAAjB,EAEI,cAAC,EAAD,aACExB,WAAYA,EACZC,cAAeA,EACfzE,aAAcA,EACd8D,aAAcA,GACVpF,IAgBZoH,EAAW9C,aAAe,CACxByB,cAAe,GACfwB,QAAQ,GCnCKH,Q,2BCKMI,G,mNAKnBC,MAAQ,CACNC,WAAY,M,EAIdC,WAAaC,KAAS,SAACvH,GAAD,OAAW,EAAK8E,MAAM0C,UAAU,EAAGxH,KAAQ,K,EAEjEyH,iBAAmB,SAACC,GAClB,EAAKC,SAAS,CAAEN,WAAYK,EAAIE,OAAO5H,QACvC,EAAKsH,WAAWI,EAAIE,OAAO5H,Q,4CAG7B,WACE,IAAQqH,EAAenC,KAAKkC,MAApBC,WACR,OACE,wBAAQzD,UAAU,SAAlB,SACE,cAAC,IAAD,CAAOQ,SAAUc,KAAKuC,iBAAkBI,YAAY,oBAAoB7H,MAAOqH,U,GArB9CjE,IAAMgC,YCLhC+B,I,uGCOMW,E,4MACnBjD,eAAiB,IAAI7F,E,EAErBoI,MAAQ,CACNzH,KAAM,GACNoI,UAAW,GACXrC,cAAe,GACfsC,kBAAmB,EACnBC,iBAAkB,EAClBC,mBAAoB,EACpBC,kBAAmB,EACnBnB,SAAS,EACTC,cAAc,EACdhH,UAAW,M,EAWbmI,Q,uCAAU,WAAO3H,EAAMC,EAASC,EAAOV,GAA7B,uBAAAX,EAAA,yDACQ,KAAZoB,GAAmBC,EADf,uBAEN,EAAKgH,SAAS,CAAEhI,KAAM,GAAI+F,cAAe,GAAIwC,mBAAoB,EAAGlB,SAAS,IAFvE,0CAMExG,EAAiB,EAAKqE,eAAtBrE,aACR,EAAKmH,SAAS,CAAEX,SAAS,EAAMC,cAAc,IAPvC,SAQuBzG,EAAaC,EAAMC,EAASC,EAAOV,GAR1D,OAQAoI,EARA,OASE1I,EAAoC0I,EAApC1I,KAAMqB,EAA8BqH,EAA9BrH,YAAaC,EAAiBoH,EAAjBpH,aAC3B,EAAK0G,UAAS,SAACW,GAAD,MAAgB,CAC5B3I,KAAMgB,EAAQ2H,EAAU3I,KAAOA,EAC/BoI,UAAWpH,EAAQhB,EAAO2I,EAAUP,UACpCf,SAAS,EACTtB,cAAe/E,EAAQ2H,EAAU5C,cAAgBhF,EACjDsH,kBAAmBrH,EAAQ2H,EAAUN,kBAAoBhH,EACzDiH,iBAAkBtH,EAAQK,EAAcsH,EAAUL,iBAClDC,mBAAoBvH,EAAQ2H,EAAUJ,mBAAqBjH,MAjBvD,kDAoBN,EAAK0G,SAAS,CAAEV,cAAc,EAAMD,SAAS,IApBvC,0D,8DAwBVjC,a,sBAAe,oCAAAzF,EAAA,6DACLkB,EAAiB,EAAKqE,eAAtBrE,aADK,EAE2B,EAAK4G,MAArCnH,EAFK,EAELA,UAAWgI,EAFN,EAEMA,iBAFN,SAGWzH,EAAayH,EAAkB,MAAM,EAAMhI,GAHtD,OAGP8H,EAHO,OAIb,EAAKJ,SAAS,CACZI,UAAWA,EAAUpI,KACrBwI,kBAAmBJ,EAAU9G,eANlB,2C,EAUfsH,iBAAmB,SAAC9H,GAClB,IAAQiF,EAAkB,EAAK0B,MAAvB1B,cACR,EAAK0C,QAAQ3H,EAAMiF,I,EAGrB8C,gBAAkB,SAAC/H,GACjB,IAAQR,EAAc,EAAKmH,MAAnBnH,UACR,EAAKmI,QAAQ3H,EAAM,MAAM,EAAMR,I,uDAjDjC,WAAqB,IAAD,OAClB,EAA8CiF,KAAKL,eAA3CjF,EAAR,EAAQA,mBAAoBuB,EAA5B,EAA4BA,cAC5BvB,IAAqBoF,MAAK,SAAC/E,GAAD,OAAe,EAAK0H,SAAS,CAAE1H,iBACzDkB,IAAgB6D,MAAK,SAACyD,GACpB,EAAKrH,WAAaqH,O,oBAgDtB,WACE,IAAQC,EAAYC,IAAZD,QACR,EACExD,KAAKkC,MADCzH,EAAR,EAAQA,KAAMoI,EAAd,EAAcA,UAAWC,EAAzB,EAAyBA,kBAAmBC,EAA5C,EAA4CA,iBAAkBC,EAA9D,EAA8DA,mBAAoBC,EAAlF,EAAkFA,kBAAsBS,EAAxG,iBAEMC,EAAc,YAAOlJ,GAU3B,OATAkJ,EAAehG,SAAQ,SAACiG,GACtBf,EAAUlF,SAAQ,SAAC/B,GACbgI,EAAS/I,KAAOe,EAAGf,KAErB+I,EAASvG,SAAWzB,EAAGyB,gBAM3B,cAACe,EAAD,CAAgBtD,MAAOkF,KAAK9D,WAA5B,SACE,qBAAKwC,UAAU,YAAf,SACE,eAAC,IAAD,CACEmF,iBAAiB,SACjB3E,SAAU,kBAAMa,YAAW,kBAAMxC,EAAmB,2BAA0B,MAFhF,UAIE,eAACiG,EAAD,CAASM,IAAI,SAAsBC,aAAW,EAA9C,UACE,cAAC,EAAD,CAAazB,UAAWtC,KAAKkD,UAC7B,cAAC,EAAD,aACElB,QAAM,EACNnC,aAAcG,KAAKH,aACnBpF,KAAMkJ,EACN5H,aAAciH,EACdlH,YAAagH,EACbvC,WAAYP,KAAKqD,kBACbK,MATkB,UAY1B,cAACF,EAAD,CAASM,IAAI,QAAb,SACE,cAAC,EAAD,aACEjE,aAAcG,KAAKH,aACnBpF,KAAMoI,EACN9G,aAAckH,EACdnH,YAAaiH,EACbxC,WAAYP,KAAKsD,iBACbI,KAPiB,oB,GArGJxF,IAAMgC,WCPxB0C,KCKfoB,IAASC,OAAO,cAAC,GAAD,IAASxG,SAASyG,eAAe,W","file":"static/js/main.c13e3d3c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/no_image_poster.68ae3506.png\";","import { format } from 'date-fns';\nimport noFoundPoster from './no_image_poster.png';\n\nexport default class MovieDBService {\n  _apiKey = 'api_key=b7473b579abba0475a9336164324a2c1';\n\n  _apiBase = 'https://api.themoviedb.org/3';\n\n  _imageBase = 'https://image.tmdb.org/t/p/w500';\n\n  requestFromDB = async (request) => {\n    const path = `${this._apiBase}${request}`;\n    const response = await fetch(path);\n    const data = await response.json();\n    return data;\n  };\n\n  createGuestSession = async () => {\n    const path = `${this._apiBase}/authentication/guest_session/new?${this._apiKey}`;\n    const response = await fetch(path);\n    const data = await response.json();\n    return data.guest_session_id;\n  };\n\n  rateMovie = async (id, value, sessionID) => {\n    const path = `${this._apiBase}/movie/${id}/rating?${this._apiKey}&guest_session_id=${sessionID}`;\n    const paramsRequest = {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify({ value }),\n    };\n    const response = await fetch(path, paramsRequest);\n    const data = await response.json();\n    return data;\n  };\n\n  searchMovies = async (page, keyword, rated, sessionID) => {\n    const path = rated\n      ? `/guest_session/${sessionID}/rated/movies?${this._apiKey}&page=${page}`\n      : `/search/movie?${this._apiKey}&query=${keyword}&page=${page}`;\n    const response = await this.requestFromDB(path);\n    const data = response.results.map((el) => this.createDataMovie(el));\n    return {\n      data,\n      currentPage: response.page,\n      totalResults: response.total_results,\n    };\n  };\n\n  getGenresList = async () => {\n    const path = `/genre/movie/list?${this._apiKey}`;\n    const genresList = await this.requestFromDB(path);\n    return genresList.genres.reduce((acc, el) => {\n      acc[el.id] = el.name;\n      return acc;\n    }, {});\n  };\n\n  createDataMovie = (data) => {\n    let date;\n    try {\n      date = format(new Date(data.release_date), 'MMM d, y');\n    } catch (err) {\n      date = 'No date info';\n    }\n\n    const poster = data.poster_path ? `${this._imageBase}${data.poster_path}` : noFoundPoster;\n\n    return {\n      id: data.id,\n      title: data.title,\n      overview: data.overview,\n      date,\n      poster,\n      genresIds: data.genre_ids,\n      globalRate: data.vote_average,\n      userRate: data.rating || 0,\n    };\n  };\n}\n","export default function cutOverflowContent(selector) {\n  const overviewBlocks = document.querySelectorAll(selector);\n  overviewBlocks.forEach((el) => {\n    if (el.clientHeight) {\n      while (el.scrollHeight > el.clientHeight) {\n        const lastSpace = el.textContent.lastIndexOf(' ');\n        el.textContent = `${el.textContent.slice(0, lastSpace)}...`;\n      }\n    }\n  });\n}\n","import React from 'react';\n\nconst { Provider: GenresProvider, Consumer: GenresConsumer } = React.createContext();\n\nexport { GenresProvider, GenresConsumer };\n","import React from 'react';\nimport './card-header.scss';\nimport PropTypes, { string } from 'prop-types';\nimport classNames from 'classnames';\n\nexport default function CardHeader({ poster, globalRate, title, date, genresIds, genresList }) {\n  const genresBlocks = genresIds.map((el) => (\n    <span key={el} className=\"movie-item__genres-item\">\n      {genresList[el]}\n    </span>\n  ));\n\n  const rateStatus = classNames({\n    'movie-item__vote-container--low': globalRate < 3,\n    'movie-item__vote-container--pre-intermediate': globalRate >= 3 && globalRate < 5,\n    'movie-item__vote-container--intermediate': globalRate >= 5 && globalRate < 7,\n  });\n\n  return (\n    <header className=\"movie-item__header\">\n      <img className=\"movie-item__poster\" src={poster} alt=\"Movie poster\" />\n      <div className=\"movie-item__header-content\">\n        <div className={`movie-item__vote-container ${rateStatus}`}>\n          <span className=\"movie-item__vote\">{globalRate}</span>\n        </div>\n        <h3 className=\"movie-item__title\">{title}</h3>\n        <div className=\"movie-item__date\">{date}</div>\n        <div className=\"movie-item__genres-container\">{genresBlocks}</div>\n      </div>\n    </header>\n  );\n}\n\nCardHeader.defaultProps = {\n  globalRate: 0,\n  genresList: {},\n};\n\nCardHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genresIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n  genresList: PropTypes.objectOf(string),\n  globalRate: PropTypes.number,\n};\n","import CardHeader from './card-header';\n\nexport default CardHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Rate } from 'antd';\n\nexport default function ItemRate({ userRate, changeRate }) {\n  return (\n    <Rate\n      onChange={(value) => changeRate(value)}\n      defaultValue={userRate}\n      allowHalf\n      count={10}\n      style={{ fontSize: '1.2em', verticalAlign: 'middle', lineHeight: '46px' }}\n    />\n  );\n}\n\nItemRate.propTypes = {\n  userRate: PropTypes.number,\n  changeRate: PropTypes.func.isRequired,\n};\n\nItemRate.defaultProps = {\n  userRate: 0,\n};\n","import ItemRate from './item-rate';\n\nexport default ItemRate;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { GenresConsumer } from '../../genres-context';\nimport './card.scss';\nimport CardHeader from '../card-header';\nimport ItemRate from '../item-rate';\nimport MovieDBService from '../../services/moviedb-service/moviedb-service';\n\nexport default class Card extends React.Component {\n  movieDBService = new MovieDBService();\n\n  static defaultProps = {\n    userRate: 0,\n    overview: 'Overview not found',\n    sessionID: null,\n  };\n\n  static propTypes = {\n    overview: PropTypes.string,\n    userRate: PropTypes.number,\n    id: PropTypes.number.isRequired,\n    sessionID: PropTypes.string,\n    refreshRated: PropTypes.func.isRequired,\n  };\n\n  changeRate = (value) => {\n    const { rateMovie } = this.movieDBService;\n    const { id, sessionID, refreshRated } = this.props;\n    rateMovie(id, value, sessionID).then(() => {\n      setTimeout(() => refreshRated(), 1000);\n    });\n  };\n\n  render() {\n    const { overview, userRate, id, ...other } = this.props;\n\n    return (\n      <div className=\"movie-item\">\n        <GenresConsumer>{(genresList) => <CardHeader {...other} genresList={genresList} />}</GenresConsumer>\n        <p id={id} className=\"movie-item__overview\">\n          {overview}\n        </p>\n        <footer className=\"movie-item__footer\">\n          <ItemRate userRate={userRate} changeRate={(value) => this.changeRate(value)} />\n        </footer>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Pagination } from 'antd';\nimport './cards-list.scss';\nimport cutOverflowContent from '../../utils/cut-overflow-content/cut-overflow-content';\n\nimport Card from '../card/card';\n\nexport default class CardsList extends React.Component {\n  static propTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    changePage: PropTypes.func.isRequired,\n    currentPage: PropTypes.number,\n    currentSearch: PropTypes.string,\n    totalResults: PropTypes.number.isRequired,\n    sessionID: PropTypes.string,\n    refreshRated: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    currentPage: 0,\n    currentSearch: '',\n    sessionID: null,\n  };\n\n  componentDidMount() {\n    cutOverflowContent('.movie-item__overview');\n  }\n\n  createMovieList(data) {\n    const { sessionID, refreshRated } = this.props;\n    return data.map((el) => {\n      const { id } = el;\n      return (\n        <Col key={id} xs={{ span: 24 }} lg={{ span: 12 }}>\n          <Card sessionID={sessionID} refreshRated={refreshRated} {...el} />\n        </Col>\n      );\n    });\n  }\n\n  render() {\n    const { data, changePage, currentPage, currentSearch, totalResults } = this.props;\n    const moviesList = this.createMovieList(data);\n    const paginationShow = (\n      <Pagination\n        current={currentPage}\n        total={totalResults}\n        onChange={(page) => changePage(page, currentSearch)}\n        pageSize={20}\n        showSizeChanger={false}\n      />\n    );\n    const pagination = moviesList.length ? paginationShow : null;\n\n    return (\n      <>\n        <Row gutter={[36, 36]}>{moviesList}</Row>\n        <div className=\"movie-list__pagination-container\">{pagination}</div>\n      </>\n    );\n  }\n}\n","import CardsList from './cards-list';\n\nexport default CardsList;\n","import AlertMessages from './alert-messages';\n\nexport default AlertMessages;\n","import React from 'react';\nimport { Alert } from 'antd';\nimport PropTypes from 'prop-types';\n\nexport default function AlertMessages({ type }) {\n  const messages = {\n    noResult: 'No matches',\n    error: 'Bad news',\n    noRated: \"It's empty here for now\",\n  };\n  const descriptions = {\n    noResult: 'Sorry, no results were found. Try to change your request.',\n    error: 'Sorry, something went wrong. Try to reload the page and repeat.',\n    noRated: 'Rate movies to add to the list',\n  };\n  const message = messages[type];\n  const description = descriptions[type];\n  return <Alert message={message} description={description} showIcon type=\"info\" />;\n}\n\nAlertMessages.propTypes = {\n  type: PropTypes.string.isRequired,\n};\n","import LoadSpinner from './load-spinner';\n\nexport default LoadSpinner;\n","import React from 'react';\nimport { Spin } from 'antd';\nimport './load-spinner.scss';\n\nexport default function LoadSpinner() {\n  return <Spin className=\"load-spinner\" size=\"large\" />;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CardsList from '../cards-list';\nimport AlertMessages from '../alert-messages';\nimport LoadSpinner from '../load-spinner';\n\nexport default function ContentTab(props) {\n  const { loading, loadingError, currentSearch, totalResults, changePage, refreshRated, search, ...data } = props;\n\n  if (loadingError) return <AlertMessages type=\"error\" />;\n  if (loading) return <LoadSpinner />;\n  if (!totalResults && !loading && currentSearch && search) return <AlertMessages type=\"noResult\" />;\n  if (!(loading || loadingError)) {\n    return (\n      <CardsList\n        changePage={changePage}\n        currentSearch={currentSearch}\n        totalResults={totalResults}\n        refreshRated={refreshRated}\n        {...data}\n      />\n    );\n  }\n}\n\nContentTab.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  loadingError: PropTypes.bool.isRequired,\n  currentSearch: PropTypes.string,\n  totalResults: PropTypes.number.isRequired,\n  changePage: PropTypes.func.isRequired,\n  refreshRated: PropTypes.func.isRequired,\n  search: PropTypes.bool,\n};\n\nContentTab.defaultProps = {\n  currentSearch: '',\n  search: false,\n};\n","import ContentTab from './content-tab';\n\nexport default ContentTab;\n","import React from 'react';\nimport { Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\n\nimport './search-panel.scss';\n\nexport default class SearchPanel extends React.Component {\n  static propTypes = {\n    newSearch: PropTypes.func.isRequired,\n  };\n\n  state = {\n    inputValue: null,\n  };\n\n  // eslint-disable-next-line react/destructuring-assignment\n  newRequest = debounce((value) => this.props.newSearch(1, value), 400);\n\n  changeInputValue = (evt) => {\n    this.setState({ inputValue: evt.target.value });\n    this.newRequest(evt.target.value);\n  };\n\n  render() {\n    const { inputValue } = this.state;\n    return (\n      <header className=\"header\">\n        <Input onChange={this.changeInputValue} placeholder=\"Type to search...\" value={inputValue} />\n      </header>\n    );\n  }\n}\n","import SearchPanel from './search-panel';\n\nexport default SearchPanel;\n","import React from 'react';\nimport { Tabs } from 'antd';\nimport './app.scss';\nimport MovieDBService from '../../services/moviedb-service/moviedb-service';\nimport cutOverflowContent from '../../utils/cut-overflow-content/cut-overflow-content';\nimport ContentTab from '../content-tab';\nimport SearchPanel from '../search-panel';\nimport { GenresProvider } from '../../genres-context';\n\nexport default class App extends React.Component {\n  movieDBService = new MovieDBService();\n\n  state = {\n    data: [],\n    ratedData: [],\n    currentSearch: '',\n    currentPageSearch: 1,\n    currentPageRated: 1,\n    totalResultsSearch: 0,\n    totalResultsRated: 0,\n    loading: false,\n    loadingError: false,\n    sessionID: null,\n  };\n\n  componentDidMount() {\n    const { createGuestSession, getGenresList } = this.movieDBService;\n    createGuestSession().then((sessionID) => this.setState({ sessionID }));\n    getGenresList().then((list) => {\n      this.genresList = list;\n    });\n  }\n\n  getData = async (page, keyword, rated, sessionID) => {\n    if (keyword === '' && !rated) {\n      this.setState({ data: [], currentSearch: '', totalResultsSearch: 0, loading: false });\n      return;\n    }\n    try {\n      const { searchMovies } = this.movieDBService;\n      this.setState({ loading: true, loadingError: false });\n      const responseMovies = await searchMovies(page, keyword, rated, sessionID);\n      const { data, currentPage, totalResults } = responseMovies;\n      this.setState((prevState) => ({\n        data: rated ? prevState.data : data,\n        ratedData: rated ? data : prevState.ratedData,\n        loading: false,\n        currentSearch: rated ? prevState.currentSearch : keyword,\n        currentPageSearch: rated ? prevState.currentPageSearch : currentPage,\n        currentPageRated: rated ? currentPage : prevState.currentPageRated,\n        totalResultsSearch: rated ? prevState.totalResultsSearch : totalResults,\n      }));\n    } catch (err) {\n      this.setState({ loadingError: true, loading: false });\n    }\n  };\n\n  refreshRated = async () => {\n    const { searchMovies } = this.movieDBService;\n    const { sessionID, currentPageRated } = this.state;\n    const ratedData = await searchMovies(currentPageRated, null, true, sessionID);\n    this.setState({\n      ratedData: ratedData.data,\n      totalResultsRated: ratedData.totalResults,\n    });\n  };\n\n  changePageSearch = (page) => {\n    const { currentSearch } = this.state;\n    this.getData(page, currentSearch);\n  };\n\n  changePageRated = (page) => {\n    const { sessionID } = this.state;\n    this.getData(page, null, true, sessionID);\n  };\n\n  render() {\n    const { TabPane } = Tabs;\n    const { data, ratedData, currentPageSearch, currentPageRated, totalResultsSearch, totalResultsRated, ...params } =\n      this.state;\n    const checkRatedData = [...data];\n    checkRatedData.forEach((searchEl) => {\n      ratedData.forEach((el) => {\n        if (searchEl.id === el.id) {\n          // eslint-disable-next-line no-param-reassign\n          searchEl.userRate = el.userRate;\n        }\n      });\n    });\n\n    return (\n      <GenresProvider value={this.genresList}>\n        <div className=\"container\">\n          <Tabs\n            defaultActiveKey=\"search\"\n            onChange={() => setTimeout(() => cutOverflowContent('.movie-item__overview'), 100)}\n          >\n            <TabPane tab=\"Search\" key=\"search\" forceRender>\n              <SearchPanel newSearch={this.getData} />\n              <ContentTab\n                search\n                refreshRated={this.refreshRated}\n                data={checkRatedData}\n                totalResults={totalResultsSearch}\n                currentPage={currentPageSearch}\n                changePage={this.changePageSearch}\n                {...params}\n              />\n            </TabPane>\n            <TabPane tab=\"Rated\" key=\"rated\">\n              <ContentTab\n                refreshRated={this.refreshRated}\n                data={ratedData}\n                totalResults={totalResultsRated}\n                currentPage={currentPageRated}\n                changePage={this.changePageRated}\n                {...params}\n              />\n            </TabPane>\n          </Tabs>\n        </div>\n      </GenresProvider>\n    );\n  }\n}\n","import App from './app';\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nimport App from './components/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}